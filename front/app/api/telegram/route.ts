import {
  isBaseMessageSchema,
  isMyChatMemberUpdateSchema,
  isPhotoMessageSchema,
  isTextMessageSchema,
  isVideoNoteMesssageSchema,
  isVoiceMesssageSchema,
} from "@/app/utils/Validation";

import { saveMessageRDB } from "@/app/lib/UploadRDB";
import { parseMessage } from "@/app/utils/Parse";
import { voiceToText } from "@/app/lib/VoiceToText";
import { afina } from "@/app/lib/BotClient";
import { Context } from "grammy";

import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  const headersSecret = req.headers.get("X-Telegram-Bot-Api-Secret-Token");

  if (headersSecret !== process.env.TELEGRAM_SECRET) {
    console.warn("Unauthorized Telegram request detected");
    return NextResponse.json({
      status: "Unauthorized",
      message: "Only Afina-bot can send requests",
      code: "UNAUTHORIZED_REQUEST",
    });
  }

  (async () => {
    try {
      const update = await req.json();

      console.log({
        status: "ok",
        message: "Update received",
        update,
      });
      console.dir(update, { depth: null, colors: true });

      // $ –ª–∏—á–Ω–æ —Ç–æ–ª—å–∫–æ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º $
      if (isBaseMessageSchema(update.message)) {
        if (
          update.message.chat.type === "private" &&
          update.message.from.id !== 726008803
        ) {
          console.log({
            status: "ignored",
            message: "Attempt to privately communicate",
            code: "ATTEMPT_PRIVATE",
          });
          const chatId = update.message.chat.id;
          const name = update.message.chat.first_name;
          afina.api.sendMessage(
            chatId,
            `–ü—Ä–æ—Å—Ç–∏, ${name}, –Ω–æ –ª–∏—á–Ω–æ –º–æ–≥—É –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–ºüíî`
          );
          return;
        }
      }

      // $ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å $
      if (isMyChatMemberUpdateSchema(update)) {
        if (update.my_chat_member) {
          const chat = update.my_chat_member.chat;
          const from = update.my_chat_member.from;

          if(from.id !== 726008803) {
          console.log({
            status: "info",
            message: "Attempt to add to group chat",
            code: "INVITE_IN_CHAT",
            chatId: chat.id,
            addedBy: from?.username || from?.id,
          });

          if (
            chat.type === "group" ||
            chat.type === "supergroup" ||
            chat.type === "channel"
          ) {
            const newStatus = update.my_chat_member.new_chat_member.status;
            if (newStatus === "member" || newStatus === "administrator") {
              try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                await afina.api.sendMessage(
                  chat.id,
                  "–ù–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –æ–±–∏–¥–µ—Ç—å, –Ω–æ —è —É—Ö–æ–∂—É –æ—Ç—Å—é–¥–∞ üëÄ"
                );

                // –í—ã—Ö–æ–¥–∏–º –∏–∑ —á–∞—Ç–∞
                await afina.api.leaveChat(chat.id);

                console.log(`Bot left chat ${chat.id}`);
              } catch (e) {
                console.error(
                  "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞",
                  e
                );
              }
            }
          }
          return true; // –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        } }

        // await afina.api.sendMessage(chatId, "–ù–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –æ–±–∏–¥–µ—Ç—å, –Ω–æ —è —É—Ö–æ–∂—É –æ—Ç—Å—é–¥–∞ üëÄ");
        // await afina.api.leaveChat(chatId);
        return;
      }

      // $ —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º $
      if (isTextMessageSchema(update.message)) {
        console.log({
          status: "ok",
          message: "Message is text message",
          code: "TEXTMESSAGE_UPDATE",
        });

        // –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å –∏ –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
        const record = parseMessage(update.update_id, update.message, "text");
        console.log({
          message: "message parsed",
          result: record,
        });

        const recordResult = await saveMessageRDB(record);
        console.log({
          message: "massege uploaded in relational database",
          record: recordResult,
        });

        const id = recordResult[0].id;

        // –¥–∞–ª–µ–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º embeddings
        // –¥–∞–ª–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω—É–∂–µ–Ω –ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç LLM

        // –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        return;
      }

      // $ —Ä–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π $
      if (isPhotoMessageSchema(update.message)) {
        console.log({
          status: "ok",
          message: "Message is photo message",
          code: "PHOTOMESSAGE_UPDATE",
        });

        return;
      }

      // $ —Ä–∞–±–æ—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º $
      if (isVoiceMesssageSchema(update.message)) {
        console.log({
          status: "ok",
          message: "Message is voice message",
          code: "VOICEMESSAGE_UPDATE",
        });

        const voice = update.message.voice;
        if (voice.file_size && voice.file_size <= 15 * 1024 * 1024) {
          try {
            const result = await voiceToText(voice.file_id);
            console.log({
              status: "ok",
              message: "Voice to text is success",
              result,
            });
            // –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            // –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω—É–∂–Ω–µ –ª–∏ –æ—Ç–≤–µ—Ç LLM
          } catch (e) {
            console.error({
              status: "error",
              message: e,
              code: "VOICE_TO_TEXT_FAILED",
            });
            // —Ä–µ–∞–≥–∏—Ä—É–µ–º –≤ —Ç–≥-—á–∞—Ç–µ —á—Ç–æ –æ—à–∏–±–∫–∞
          }
        } else {
          console.error({
            status: "error",
            message: "Voice file is too large",
            code: "FILE_TOO_LARGE",
          });
          // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–≥
        }

        return;
      }

      // $ —Ä–∞–±–æ—Ç–∞ —Å –∫—Ä—É–∂–æ—á–∫–æ–º $
      if (isVideoNoteMesssageSchema(update.message)) {
        console.log({
          status: "ok",
          message: "Message is videonote message",
          code: "VIDEONOTEMESSAGE_UPDATE",
        });
        return;
      }

      console.log({
        status: "ignored",
        message: "Update has unsupported type",
        code: "UNSUPPORTED_TYPE_UPDATE",
      });

      console.dir(update, { depth: null, colors: true });

      return;
    } catch (e) {
      console.error({
        status: "error",
        message: e,
        code: "UNEXPECTED_SERVER_ERROR",
      });
    }
  })();

  return NextResponse.json(null, { status: 200 });
}
