import { Bot } from "grammy";
import { isBaseMessageSchema } from "../utils/Validation";
import { isMyChatMemberUpdateSchema } from "../utils/Validation";

if (!process.env.BOT_TOKEN) {
  throw new Error("Bot token missing");
}

export const afina = new Bot(String(process.env.BOT_TOKEN));

export async function afiOnlyCreator(update: any) {
  // $ –ª–∏—á–Ω–æ —Ç–æ–ª—å–∫–æ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º $
  if (isBaseMessageSchema(update.message)) {
    if (
      update.message.chat.type === "private" &&
      update.message.from.id !== 726008803
    ) {
      console.log({
        status: "ignored",
        message: "Attempt to privately communicate",
        code: "ATTEMPT_PRIVATE",
      });
      const chatId = update.message.chat.id;
      const name = update.message.chat.first_name;
      afina.api.sendMessage(
        chatId,
        `–ü—Ä–æ—Å—Ç–∏, ${name}, –Ω–æ –ª–∏—á–Ω–æ –º–æ–≥—É –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–ºüíî`
      );
      return false;
    } 
    return true;
  }

  // $ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å $
  if (isMyChatMemberUpdateSchema(update)) {
    if (update.my_chat_member) {
      const chat = update.my_chat_member.chat;
      const from = update.my_chat_member.from;

      if (from.id !== 726008803) {
        console.log({
          status: "info",
          message: "Attempt to add to group chat",
          code: "INVITE_IN_CHAT",
          chatId: chat.id,
          addedBy: from?.username || from?.id,
        });

        if (
          chat.type === "group" ||
          chat.type === "supergroup" ||
          chat.type === "channel"
        ) {
          const newStatus = update.my_chat_member.new_chat_member.status;
          if (newStatus === "member" || newStatus === "administrator") {
            try {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
              await afina.api.sendMessage(
                chat.id,
                "–ù–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –æ–±–∏–¥–µ—Ç—å, –Ω–æ —è —É—Ö–æ–∂—É –æ—Ç—Å—é–¥–∞ üëÄ"
              );

              // –í—ã—Ö–æ–¥–∏–º –∏–∑ —á–∞—Ç–∞
              await afina.api.leaveChat(chat.id);

              console.log(`Bot left chat ${chat.id}`);
            } catch (e) {
              console.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞",
                e
              );
            }
          }
        }
        return false;
      }
    }

    return true;
  }
}

export async function afiUnsupportedType(chatId: number) {
  await afina.api.sendMessage(chatId, "–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö üí©")
}

export function checkMention(text: string) {
  const mentionRegex = /(afina|–∞—Ñ–∏–Ω–∞|afi|–∞—Ñ–∏)/i;
  return mentionRegex.test(text);
}

export function removeMention(text: string): string {
  const mentionRegex = /\b(afina|–∞—Ñ–∏–Ω–∞|afi|–∞—Ñ–∏)\b[\s,:;]*?/i;
  return text.replace(mentionRegex, '').trim();
}

